{"version":3,"sources":["fbase.js","components/AuthForm.js","pages/Auth.js","components/Tweet.js","components/TweetFactory.js","pages/Home.js","components/Navigation.js","pages/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","firebase","initializeApp","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","then","result","Tweet","tweetObj","isOwner","text","tempTweet","setTempTweet","editFlag","setEditFlag","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","onOKClick","update","event","src","width","height","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","file","files","reader","FileReader","onloadend","finishedEvent","currentTarget","readAsDataURL","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","data","Navigation","to","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","navigate","useNavigate","onLogOutClick","signOut","updateProfile","AppRouter","isLoggedIn","exact","path","element","App","init","setInit","setUserObj","setUser","user","args","onAuthStateChanged","Boolean","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c1f71cae.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport 'firebase/compat/firestore'\nimport 'firebase/compat/storage'\n// import firebase from \"firebase/app\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const firebaseInstance = firebase\nexport const authService = firebase.auth()\nexport const dbService = firebase.firestore()\nexport const storageService = firebase.storage()\n","import {authService} from 'fbase'\nimport {useState} from 'react'\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [newAccount, setNewAccount] = useState(true)\n    const [error, setError] = useState('')\n\n    const onChange = e => {\n        // const {\n        //     target: {name, value},\n        // } = e;\n        // 왜이렇게 할당하지? 굳이 구조분해할당을 이렇게써야하나\n        if (e.target.name === 'email') {\n            setEmail(e.target.value)\n        } else if (e.target.name === 'password') {\n            setPassword(e.target.value)\n        }\n    }\n\n    const onSubmit = async e => {\n        e.preventDefault()\n        try {\n            let data\n            if (newAccount) {\n                //create new Account\n                data = await authService.createUserWithEmailAndPassword(\n                    email,\n                    password,\n                )\n            } else {\n                //log in\n                data = await authService.signInWithEmailAndPassword(\n                    email,\n                    password,\n                )\n            }\n        } catch (e) {\n            setError(e.message)\n        }\n    }\n    const toggleAccount = () => setNewAccount(prev => !prev)\n\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                    onChange={onChange}\n                />\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    required\n                    value={password}\n                    onChange={onChange}\n                />\n                <input\n                    type=\"submit\"\n                    placeholder=\"value\"\n                    required\n                    value={newAccount ? 'Create Account' : 'Log In'}\n                />\n                {error}\n            </form>\n            <span onClick={toggleAccount}>\n                {newAccount ? 'Sign In' : 'Create Account'}\n            </span>\n        </>\n    )\n}\n\nexport default AuthForm\n","import {firebaseInstance, authService} from 'fbase'\nimport AuthForm from 'components/AuthForm.js'\n\nconst Auth = () => {\n    const onSocialClick = async e => {\n        const {\n            target: {name},\n        } = e\n        let provider\n\n        //팝업창 닫을 시 에러발생\n        //https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth\n        //참고하여 해결\n        if (name === 'google') {\n            provider = new firebaseInstance.auth.GoogleAuthProvider()\n        } else if (name === 'github') {\n            provider = new firebaseInstance.auth.GithubAuthProvider()\n        }\n\n        const data = await authService.signInWithPopup(provider).then(\n            function (result) {},\n            function (error) {},\n        )\n    }\n\n    return (\n        <div>\n            <AuthForm />\n            <div>\n                <button onClick={onSocialClick} name=\"google\">\n                    Continue with Google\n                </button>\n                <button onClick={onSocialClick} name=\"github\">\n                    Continue with Github\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Auth\n","import {dbService, storageService} from 'fbase'\nimport {useState} from 'react'\n\nconst Tweet = ({tweetObj, isOwner}) => {\n    const [tempTweet, setTempTweet] = useState(tweetObj.text)\n    const [editFlag, setEditFlag] = useState(false)\n\n    const onDeleteClick = async () => {\n        const flag = window.confirm('삭제하시겠습니까?')\n        if (flag) {\n            await dbService.doc(`tweet/${tweetObj.id}`).delete()\n            if (tweetObj.attachmentUrl !== '') {\n                await storageService\n                    .refFromURL(`${tweetObj.attachmentUrl}`)\n                    .delete()\n            }\n        }\n    }\n\n    const onEditClick = () => {\n        setEditFlag(true)\n        setTempTweet(tweetObj.text)\n    }\n\n    const onCancelClick = () => {\n        setEditFlag(false)\n        setTempTweet('')\n    }\n\n    /*  error Code\n     *   onclick event function의 첫 인자로 무조건 event객체가 들어오는게 기본동작\n     *   그래서 이렇게 하면 이벤트객체의 id를 가져오는데 undefined가 뜬다.\n     *   실수 하지말자!\n     */\n    // const onOKClick = async (tweetObj) => {\n    //     const flag = window.confirm('수정하시겠습니까?');\n    //     if(flag) {\n    //         await dbService.doc(`tweet/${tweetObj.id}`).update({text: tempTweet});\n    //         setEditFlag(false);\n    //     }\n    // }\n\n    const onOKClick = async () => {\n        const flag = window.confirm('수정하시겠습니까?')\n        if (flag) {\n            await dbService\n                .doc(`tweet/${tweetObj.id}`)\n                .update({text: tempTweet})\n            setEditFlag(false)\n        }\n    }\n    const onChange = event => {\n        // const value = event.target.value;\n        const {\n            target: {value},\n        } = event\n        setTempTweet(value)\n    }\n\n    return (\n        <div>\n            {editFlag ? (\n                <>\n                    <input type=\"text\" value={tempTweet} onChange={onChange} />\n                    <button onClick={onCancelClick}>Cancel</button>\n                    <button onClick={onOKClick}>OK</button>\n                </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.attachmentUrl && (\n                        <img\n                            src={tweetObj.attachmentUrl}\n                            width=\"50px\"\n                            height=\"50px\"\n                        />\n                    )}\n                    {isOwner && (\n                        <>\n                            <button onClick={onDeleteClick}>\n                                Delete Tweet\n                            </button>\n                            <button onClick={onEditClick}>Edit Tweet</button>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default Tweet\n","import {v4 as uuidv4} from 'uuid'\nimport {storageService} from 'fbase'\nimport {useState} from 'react'\nimport {dbService} from 'fbase'\n\nconst TweetFactory = ({userObj}) => {\n    const [tweet, setTweet] = useState('')\n    const [attachment, setAttachment] = useState('')\n\n    const onClearAttachment = () => setAttachment('')\n\n    const onChange = event => {\n        event.preventDefault()\n        const {\n            target: {value},\n        } = event\n        setTweet(value)\n    }\n\n    const onFileChange = event => {\n        const {\n            target: {files},\n        } = event\n        const file = files[0]\n\n        const reader = new FileReader()\n        reader.onloadend = finishedEvent => {\n            const {\n                currentTarget: {result},\n            } = finishedEvent\n            setAttachment(result)\n        }\n        reader.readAsDataURL(file)\n    }\n\n    const onSubmit = async event => {\n        event.preventDefault()\n        /* await dbService.collection('tweet').add({\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n        })\n        setTweet('') */\n        let attachmentUrl = ''\n        if (attachment !== '') {\n            const attachmentRef = storageService\n                .ref()\n                .child(`${userObj.uid}/${uuidv4()}`)\n            const response = await attachmentRef.putString(\n                attachment,\n                'data_url',\n            )\n            attachmentUrl = await response.ref.getDownloadURL()\n        }\n        await dbService.collection('tweet').add({\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        })\n        setTweet('')\n        setAttachment('')\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <input\n                value={tweet}\n                onChange={onChange}\n                type=\"text\"\n                placeholder=\"What's on your mind?\"\n                maxLength={120}\n            />\n            <input\n                type=\"file\"\n                accept=\".jpg, .jpeg, .png\"\n                onChange={onFileChange}\n            />\n            <input type=\"submit\" value=\"Tweet\" />\n            {attachment && (\n                <div>\n                    <img src={attachment} width=\"50px\" height=\"50px\" />\n                    <button onClick={onClearAttachment}>Clear</button>\n                </div>\n            )}\n        </form>\n    )\n}\n\nexport default TweetFactory\n","import {dbService} from 'fbase'\nimport {useEffect, useState} from 'react'\nimport Tweet from 'components/Tweet'\nimport TweetFactory from 'components/TweetFactory'\n\nconst Home = ({userObj}) => {\n    const [tweets, setTweets] = useState([])\n\n    // const getTweets = async () => {\n    //     const dbTweets = await dbService.collection(\"tweet\").get();\n    //     dbTweets.forEach(doc => {\n    //         const tweetObject = { ...doc.data(), id: doc.id };\n    //         //여기서  prev란? setState 에서 제공하는 이전 객체값.\n    //         setTweets( prev =>  [ tweetObject, ...prev ])\n    //     })\n    // }\n         \n    useEffect(() => {\n        dbService.collection('tweet').onSnapshot(snapshot => {\n            const newArray = snapshot.docs.map(document => ({\n                id: document.id,\n                ...document.data(),\n            }))\n            setTweets(newArray)\n        })\n    }, [])\n\n    return (\n        <>\n            <TweetFactory userObj={userObj} />\n            <div>\n                {tweets.map(tweet => (\n                    <Tweet\n                        key={tweet.id}\n                        tweetObj={tweet}\n                        isOwner={tweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </>\n    )\n}\n\nexport default Home\n","import {Link} from 'react-router-dom'\n\nconst Navigation = ({userObj}) => {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                    <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation\n","import {authService, dbService} from 'fbase'\nimport {useNavigate} from 'react-router-dom'\nimport {useEffect, useState} from 'react'\nimport Tweet from 'components/Tweet'\n\n/* \n// v5\nconst history = useHistory();\n\nhistory.push('/home');\nhistory.replace('/home');\n\n// v6\nconst navigate = useNavigate();\n\nnavigate('/home');\nnavigate('/home', {replace: true});\n*/\n\nconst Profile = ({userObj, refreshUser}) => {\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n\n    const navigate = useNavigate()\n\n    const onLogOutClick = async () => {\n        await authService.signOut()\n        refreshUser()\n        navigate('/')\n    }\n\n    const onChange = event => {\n        const {\n            target: {value},\n        } = event\n        setNewDisplayName(value)\n    }\n\n    const onSubmit = async event => {\n        event.preventDefault()\n        if (userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({displayName: newDisplayName})\n            refreshUser()\n        }\n    }\n    // const [tweets, setTweets] = useState([])\n\n    // useEffect(() => {\n    //     getMyTweets()\n    // }, [])\n\n    // const getMyTweets = async () => {\n    //     const tweets = await dbService\n    //         .collection('tweet')\n    //         .where('creatorId', '==', userObj.uid)\n    //         .orderBy('createdAt', 'asc')\n\n    //     tweets.onSnapshot(snapshot => {\n    //         const newArray = snapshot.docs.map(document => ({\n    //             id: document.id,\n    //             ...document.data(),\n    //         }))\n    //         setTweets(newArray)\n    //     })\n    // }\n\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input\n                    type=\"text\"\n                    onChange={onChange}\n                    placeholder=\"Display name\"\n                    value={newDisplayName}\n                />\n                <input type=\"submit\" value=\"Update Profile\" />\n            </form>\n            <button onClick={onLogOutClick}>Log Out</button>\n            {/* <div>\n                {tweets.map(tweet => (\n                    <Tweet\n                        key={tweet.id}\n                        tweetObj={tweet}\n                        isOwner={tweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div> */}\n        </>\n    )\n}\n\nexport default Profile\n","import {HashRouter as Router, Route, Routes, Navigate} from 'react-router-dom'\nimport Auth from 'pages/Auth'\nimport Home from 'pages/Home'\nimport Navigation from './Navigation'\nimport Profile from 'pages/Profile'\n\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Routes>\n                {isLoggedIn ? (\n                    <>\n                        <Route\n                            exact\n                            path=\"/\"\n                            element={<Home userObj={userObj} />}\n                        />\n                        <Route\n                            exact\n                            path=\"/profile\"\n                            element={\n                                <Profile\n                                    refreshUser={refreshUser}\n                                    userObj={userObj}\n                                />\n                            }\n                        />\n                    </>\n                ) : (\n                    <Route exact path=\"/\" element={<Auth />} />\n                )}\n                <Route path=\"*\" element={<Navigate to=\"/\" />} />\n            </Routes>\n        </Router>\n    )\n}\n\nexport default AppRouter\n","// import logo from './logo.svg';\n// import './App.css';\nimport {useEffect, useState} from 'react'\nimport AppRouter from 'components/Router'\nimport {authService} from 'fbase'\n\nfunction App() {\n    const [init, setInit] = useState(false)\n    const [userObj, setUserObj] = useState(null)\n\n    const setUser = user => {\n        setUserObj(\n            user && {\n                uid: user.uid,\n                displayName: user.displayName,\n                updateProfile: args => user.updateProfile(args),\n            },\n        )\n    }\n    //https://ko.reactjs.org/docs/hooks-effect.html\n    //두번째 인자로 배열을 넘겨서, 배열안의 변수가 변하지 않는다면 effect를 막는식으로\n    //렌더링 될떄마다 effect가 발동되는것을 막을 수 있다.\n    //빈배열을 넘긴다면, effect가 일어나지 않음을 의미\n    useEffect(() => {\n        authService.onAuthStateChanged(user => {\n            if (user) {\n                setUser(user)\n            } else {\n                setUser(null)\n            }\n            setInit(true)\n        })\n    }, [])\n\n    const refreshUser = () => {\n        // setUserObj(authService.currentUser)\n        const user = authService.currentUser\n        setUser(user)\n    }\n\n    return (\n        <>\n            {init ? (\n                <AppRouter\n                    isLoggedIn={Boolean(userObj)}\n                    userObj={userObj}\n                    refreshUser={refreshUser}\n                />\n            ) : (\n                'initializing...'\n            )}\n        </>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from 'components/App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}