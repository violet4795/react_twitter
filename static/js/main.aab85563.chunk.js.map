{"version":3,"sources":["fbase.js","components/AuthForm.js","pages/Auth.js","components/Tweet.js","components/TweetFactory.js","pages/Home.js","components/Navigation.js","pages/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","then","result","style","maxWidth","width","margin","marginTop","display","justifyContent","icon","faTwitter","color","size","marginBotton","faGoogle","faGithub","Tweet","tweetObj","isOwner","text","tempTweet","setTempTweet","editFlag","setEditFlag","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","onOKClick","update","event","autoFocus","src","height","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","htmlFor","faPlus","accept","file","files","reader","FileReader","onloadend","finishedEvent","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","newArray","docs","map","document","data","Navigation","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","navigate","useNavigate","onLogOutClick","signOut","updateProfile","AppRouter","isLoggedIn","exact","path","element","App","init","setInit","setUserObj","setUser","user","args","onAuthStateChanged","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aab85563.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport 'firebase/compat/firestore'\nimport 'firebase/compat/storage'\n// import firebase from \"firebase/app\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n//asdfasfd\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const firebaseInstance = firebase\nexport const authService = firebase.auth()\nexport const dbService = firebase.firestore()\nexport const storageService = firebase.storage()\n","import {authService} from 'fbase'\nimport {useState} from 'react'\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [newAccount, setNewAccount] = useState(true)\n    const [error, setError] = useState('')\n\n    const onChange = e => {\n        // const {\n        //     target: {name, value},\n        // } = e;\n        // 왜이렇게 할당하지? 굳이 구조분해할당을 이렇게써야하나\n        if (e.target.name === 'email') {\n            setEmail(e.target.value)\n        } else if (e.target.name === 'password') {\n            setPassword(e.target.value)\n        }\n    }\n\n    const onSubmit = async e => {\n        e.preventDefault()\n        try {\n            let data\n            if (newAccount) {\n                //create new Account\n                data = await authService.createUserWithEmailAndPassword(\n                    email,\n                    password,\n                )\n            } else {\n                //log in\n                data = await authService.signInWithEmailAndPassword(\n                    email,\n                    password,\n                )\n            }\n        } catch (e) {\n            setError(e.message)\n        }\n    }\n    const toggleAccount = () => setNewAccount(prev => !prev)\n\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    required\n                    value={password}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    type=\"submit\"\n                    placeholder=\"value\"\n                    required\n                    value={newAccount ? 'Create Account' : 'Log In'}\n                    className=\"authInput authSubmit\"\n                />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? 'Sign In' : 'Create Account'}\n            </span>\n        </>\n    )\n}\n\nexport default AuthForm\n","import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faTwitter, faGoogle, faGithub} from '@fortawesome/free-brands-svg-icons'\nimport {firebaseInstance, authService} from 'fbase'\nimport AuthForm from 'components/AuthForm.js'\n\nconst Auth = () => {\n    const onSocialClick = async e => {\n        const {\n            target: {name},\n        } = e\n        let provider\n        //\n        //팝업창 닫을 시 에러발생\n        //https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth\n        //참고하여 해결\n        if (name === 'google') {\n            provider = new firebaseInstance.auth.GoogleAuthProvider()\n        } else if (name === 'github') {\n            provider = new firebaseInstance.auth.GithubAuthProvider()\n        }\n\n        const data = await authService.signInWithPopup(provider).then(\n            function (result) {},\n            function (error) {},\n        )\n    }\n\n    return (\n        <div\n        style={{\n            maxWidth: 890,\n            width: '100%',\n            margin: '0 auto',\n            marginTop: 80,\n            display: 'flex',\n            justifyContent: 'center',\n        }}>\n            <div className=\"authContainer\">\n                <FontAwesomeIcon\n                    icon={faTwitter}\n                    color={'#04AAFF'}\n                    size=\"3x\"\n                    style={{marginBotton: 30}}\n                />\n                <AuthForm />\n                <div className=\"authBtns\">\n                    <button\n                        onClick={onSocialClick}\n                        name=\"google\"\n                        className=\"authBtn\"\n                    >\n                        Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                    </button>\n                    <button\n                        onClick={onSocialClick}\n                        name=\"github\"\n                        className=\"authBtn\"\n                    >\n                        Continue with Github <FontAwesomeIcon icon={faGithub} />\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Auth\n","import {dbService, storageService} from 'fbase'\nimport {useState} from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faTrash, faPencilAlt} from '@fortawesome/free-solid-svg-icons'\n\nconst Tweet = ({tweetObj, isOwner}) => {\n    const [tempTweet, setTempTweet] = useState(tweetObj.text)\n    const [editFlag, setEditFlag] = useState(false)\n\n    const onDeleteClick = async () => {\n        const flag = window.confirm('삭제하시겠습니까?')\n        if (flag) {\n            await dbService.doc(`tweet/${tweetObj.id}`).delete()\n            if (tweetObj.attachmentUrl !== '') {\n                await storageService\n                    .refFromURL(`${tweetObj.attachmentUrl}`)\n                    .delete()\n            }\n        }\n    }\n    //asdfasdf\n    const onEditClick = () => {\n        setEditFlag(true)\n        setTempTweet(tweetObj.text)\n    }\n\n    const onCancelClick = () => {\n        setEditFlag(false)\n        setTempTweet('')\n    }\n\n    /*  error Code\n     *   onclick event function의 첫 인자로 무조건 event객체가 들어오는게 기본동작\n     *   그래서 이렇게 하면 이벤트객체의 id를 가져오는데 undefined가 뜬다.\n     *   실수 하지말자!\n     */\n    // const onOKClick = async (tweetObj) => {\n    //     const flag = window.confirm('수정하시겠습니까?');\n    //     if(flag) {\n    //         await dbService.doc(`tweet/${tweetObj.id}`).update({text: tempTweet});\n    //         setEditFlag(false);\n    //     }\n    // }\n\n    const onOKClick = async () => {\n        const flag = window.confirm('수정하시겠습니까?')\n        if (flag) {\n            await dbService\n                .doc(`tweet/${tweetObj.id}`)\n                .update({text: tempTweet})\n            setEditFlag(false)\n        }\n    }\n    const onChange = event => {\n        // const value = event.target.value;\n        const {\n            target: {value},\n        } = event\n        setTempTweet(value)\n    }\n\n    return (\n        <div className=\"nweet\">\n            {editFlag ? (\n                <>\n                    <div className=\"container nweetEdit\">\n                        <input\n                            type=\"text\"\n                            value={tempTweet}\n                            onChange={onChange}\n                            placeholder=\"Edit your tweet\"\n                            autoFocus\n                            className=\"formInput\"\n                        />\n                        <button onClick={onOKClick} className=\"formBtn\">\n                            OK\n                        </button>\n                    </div>\n                    <button\n                        onClick={onCancelClick}\n                        className=\"formBtn cancelBtn\"\n                    >\n                        Cancel\n                    </button>\n                </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.attachmentUrl && (\n                        <img\n                            src={tweetObj.attachmentUrl}\n                            width=\"50px\"\n                            height=\"50px\"\n                        />\n                    )}\n                    {isOwner && (\n                        <div className=\"nweet__actions\">\n                            <span onClick={onDeleteClick}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={onEditClick}>\n                                <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default Tweet\n","import {v4 as uuidv4} from 'uuid'\nimport {storageService} from 'fbase'\nimport {useState} from 'react'\nimport {dbService} from 'fbase'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faPlus, faTimes} from '@fortawesome/free-solid-svg-icons'\n\nconst TweetFactory = ({userObj}) => {\n    const [tweet, setTweet] = useState('')\n    const [attachment, setAttachment] = useState('')\n\n    const onClearAttachment = () => setAttachment('')\n\n    const onChange = event => {\n        event.preventDefault()\n        const {\n            target: {value},\n        } = event\n        setTweet(value)\n    }\n\n    const onFileChange = event => {\n        const {\n            target: {files},\n        } = event\n        const file = files[0]\n\n        const reader = new FileReader()\n        reader.onloadend = finishedEvent => {\n            const {\n                currentTarget: {result},\n            } = finishedEvent\n            setAttachment(result)\n        }\n        if (Boolean(file)) {\n            reader.readAsDataURL(file)\n        }\n    }\n\n    const onSubmit = async event => {\n        event.preventDefault()\n        if (tweet === '') {\n            return\n        }\n        /* await dbService.collection('tweet').add({\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n        })\n        setTweet('') */\n        let attachmentUrl = ''\n        if (attachment !== '') {\n            const attachmentRef = storageService\n                .ref()\n                .child(`${userObj.uid}/${uuidv4()}`)\n            const response = await attachmentRef.putString(\n                attachment,\n                'data_url',\n            )\n            attachmentUrl = await response.ref.getDownloadURL()\n        }\n        await dbService.collection('tweet').add({\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        })\n        setTweet('')\n        setAttachment('')\n    }\n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                    className=\"factoryInpuut__input\"\n                    value={tweet}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"&rarr;\"\n                    className=\"factoryInput__arrow\"\n                />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n                <FontAwesomeIcon icon=\"fa-thin fa-plus\" />\n            </label>\n            <input\n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{opacity: 0}}\n            />\n            {/* <input\n                type=\"file\"\n                accept=\".jpg, .jpeg, .png\"\n                onChange={onFileChange}\n            />\n            <input type=\"submit\" value=\"Tweet\" /> */}\n            {attachment && (\n                <div className=\"factoryInpuut__attachment\">\n                    <img\n                        src={attachment}\n                        style={{backgroundImage: attachment}}\n                    />\n                    <div\n                        className=\"factoryInpuut__clear\"\n                        onClick={onClearAttachment}\n                    >\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                        {/* <button onClick={onClearAttachment}>Clear</button> */}\n                    </div>\n                </div>\n            )}\n        </form>\n    )\n}\n\nexport default TweetFactory\n","import {dbService} from 'fbase'\nimport {useEffect, useState} from 'react'\nimport Tweet from 'components/Tweet'\nimport TweetFactory from 'components/TweetFactory'\n\nconst Home = ({userObj}) => {\n    const [tweets, setTweets] = useState([])\n\n    // const getTweets = async () => {\n    //     const dbTweets = await dbService.collection(\"tweet\").get();\n    //     dbTweets.forEach(doc => {\n    //         const tweetObject = { ...doc.data(), id: doc.id };\n    //         //여기서  prev란? setState 에서 제공하는 이전 객체값.\n    //         setTweets( prev =>  [ tweetObject, ...prev ])\n    //     })\n    // }\n\n    useEffect(() => {\n        dbService\n            .collection('tweet')\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(snapshot => {\n                const newArray = snapshot.docs.map(document => ({\n                    id: document.id,\n                    ...document.data(),\n                }))\n                setTweets(newArray)\n            })\n    }, [])\n\n    return (\n        <div\n            style={{\n                maxWidth: 890,\n                width: '100%',\n                margin: '0 auto',\n                marginTop: 80,\n                display: 'flex',\n                justifyContent: 'center',\n            }}\n        >\n            <div className=\"container\">\n                <TweetFactory userObj={userObj} />\n                <div style={{marginTop: 30}}>\n                    {tweets.map(tweet => (\n                        <Tweet\n                            key={tweet.id}\n                            tweetObj={tweet}\n                            isOwner={tweet.creatorId === userObj.uid}\n                        />\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import {Link} from 'react-router-dom'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons'\nimport {faUser} from '@fortawesome/free-solid-svg-icons'\n\nconst Navigation = ({userObj}) => {\n    return (\n        <nav>\n            <ul\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    marginTop: 50,\n                }}\n            >\n                <li>\n                    <Link to=\"/\" style={{marginRight: 10}}>\n                        <FontAwesomeIcon\n                            icon={faTwitter}\n                            color={'#04AAFF'}\n                            size=\"2x\"\n                        />\n                    </Link>\n                </li>\n                <li>\n                    <Link\n                        to=\"/profile\"\n                        style={{\n                            marginLeft: 10,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            fontSize: 12,\n                        }}\n                    >\n                        <FontAwesomeIcon\n                            icon={faUser}\n                            color={'#04AAFF'}\n                            size=\"2x\"\n                        />\n                        <span style={{marginTop: 10}}>\n                            {userObj.displayName\n                                ? `${userObj.displayName}의 Profile`\n                                : 'Profile'}\n                        </span>\n                    </Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation\n","import {authService, dbService} from 'fbase'\nimport {useNavigate} from 'react-router-dom'\nimport {useEffect, useState} from 'react'\nimport Tweet from 'components/Tweet'\n\n/* \n// v5\nconst history = useHistory();\n\nhistory.push('/home');\nhistory.replace('/home');\n\n// v6\nconst navigate = useNavigate();\n\nnavigate('/home');\nnavigate('/home', {replace: true});\n*/\n\nconst Profile = ({userObj, refreshUser}) => {\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n\n    const navigate = useNavigate()\n\n    const onLogOutClick = async () => {\n        await authService.signOut()\n        refreshUser()\n        navigate('/')\n    }\n\n    const onChange = event => {\n        const {\n            target: {value},\n        } = event\n        setNewDisplayName(value)\n    }\n\n    const onSubmit = async event => {\n        event.preventDefault()\n        if (userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({displayName: newDisplayName})\n            refreshUser()\n        }\n    }\n    // const [tweets, setTweets] = useState([])\n\n    // useEffect(() => {\n    //     getMyTweets()\n    // }, [])\n\n    // const getMyTweets = async () => {\n    //     const tweets = await dbService\n    //         .collection('tweet')\n    //         .where('creatorId', '==', userObj.uid)\n    //         .orderBy('createdAt', 'asc')\n\n    //     tweets.onSnapshot(snapshot => {\n    //         const newArray = snapshot.docs.map(document => ({\n    //             id: document.id,\n    //             ...document.data(),\n    //         }))\n    //         setTweets(newArray)\n    //     })\n    // }\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input\n                    type=\"text\"\n                    onChange={onChange}\n                    placeholder=\"Display name\"\n                    value={newDisplayName}\n                    autoFocus\n                    className=\"formInput\"\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{marginTop: 10}}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n            {/* <div>\n                {tweets.map(tweet => (\n                    <Tweet\n                        key={tweet.id}\n                        tweetObj={tweet}\n                        isOwner={tweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div> */}\n        </div>\n    )\n}\n\nexport default Profile\n","import {HashRouter as Router, Route, Routes, Navigate} from 'react-router-dom'\nimport Auth from 'pages/Auth'\nimport Home from 'pages/Home'\nimport Navigation from './Navigation'\nimport Profile from 'pages/Profile'\n\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Routes>\n                {isLoggedIn ? (\n                    <>\n                        <Route\n                            exact\n                            path=\"/\"\n                            element={<Home userObj={userObj} />}\n                        />\n                        <Route\n                            exact\n                            path=\"/profile\"\n                            element={\n                                <Profile\n                                    refreshUser={refreshUser}\n                                    userObj={userObj}\n                                />\n                            }\n                        />\n                    </>\n                ) : (\n                    <Route exact path=\"/\" element={<Auth />} />\n                )}\n                <Route path=\"*\" element={<Navigate to=\"/\" />} />\n            </Routes>\n        </Router>\n    )\n}\n\nexport default AppRouter\n","// import logo from './logo.svg';\n// import './App.css';\nimport {useEffect, useState} from 'react'\nimport AppRouter from 'components/Router'\nimport {authService} from 'fbase'\n\nfunction App() {\n    const [init, setInit] = useState(false)\n    const [userObj, setUserObj] = useState(null)\n\n    const setUser = user => {\n        setUserObj(\n            user && {\n                uid: user.uid,\n                displayName: user.displayName,\n                updateProfile: args => user.updateProfile(args),\n            },\n        )\n    }\n    //https://ko.reactjs.org/docs/hooks-effect.html\n    //두번째 인자로 배열을 넘겨서, 배열안의 변수가 변하지 않는다면 effect를 막는식으로\n    //렌더링 될떄마다 effect가 발동되는것을 막을 수 있다.\n    //빈배열을 넘긴다면, effect가 일어나지 않음을 의미\n    useEffect(() => {\n        authService.onAuthStateChanged(user => {\n            if (user) {\n                setUser(user)\n            } else {\n                setUser(null)\n            }\n            setInit(true)\n        })\n    }, [])\n\n    const refreshUser = () => {\n        // setUserObj(authService.currentUser)\n        const user = authService.currentUser\n        setUser(user)\n    }\n\n    return (\n        <>\n            {init ? (\n                <AppRouter\n                    isLoggedIn={Boolean(userObj)}\n                    userObj={userObj}\n                    refreshUser={refreshUser}\n                />\n            ) : (\n                'initializing...'\n            )}\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import './index.css';\nimport App from 'components/App'\nimport './style.css'\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}