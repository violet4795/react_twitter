{"version":3,"sources":["fbase.js","components/AuthForm.js","pages/Auth.js","components/Tweet.js","components/TweetFactory.js","pages/Home.js","components/Navigation.js","pages/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","then","result","Tweet","tweetObj","isOwner","text","tempTweet","setTempTweet","editFlag","setEditFlag","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","onOKClick","update","event","src","width","height","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","file","files","reader","FileReader","onloadend","finishedEvent","currentTarget","readAsDataURL","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","data","Navigation","to","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","navigate","useNavigate","onLogOutClick","signOut","updateProfile","AppRouter","isLoggedIn","exact","path","element","App","init","setInit","setUserObj","setUser","user","args","onAuthStateChanged","Boolean","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82fb03ab.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport firebase from 'firebase/compat/app'\r\nimport 'firebase/compat/auth'\r\nimport 'firebase/compat/firestore'\r\nimport 'firebase/compat/storage'\r\n// import firebase from \"firebase/app\"\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const firebaseInstance = firebase\r\nexport const authService = firebase.auth()\r\nexport const dbService = firebase.firestore()\r\nexport const storageService = firebase.storage()\r\n","import {authService} from 'fbase'\r\nimport {useState} from 'react'\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [newAccount, setNewAccount] = useState(true)\r\n    const [error, setError] = useState('')\r\n\r\n    const onChange = e => {\r\n        // const {\r\n        //     target: {name, value},\r\n        // } = e;\r\n        // 왜이렇게 할당하지? 굳이 구조분해할당을 이렇게써야하나\r\n        if (e.target.name === 'email') {\r\n            setEmail(e.target.value)\r\n        } else if (e.target.name === 'password') {\r\n            setPassword(e.target.value)\r\n        }\r\n    }\r\n\r\n    const onSubmit = async e => {\r\n        e.preventDefault()\r\n        try {\r\n            let data\r\n            if (newAccount) {\r\n                //create new Account\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email,\r\n                    password,\r\n                )\r\n            } else {\r\n                //log in\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email,\r\n                    password,\r\n                )\r\n            }\r\n        } catch (e) {\r\n            setError(e.message)\r\n        }\r\n    }\r\n    const toggleAccount = () => setNewAccount(prev => !prev)\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    required\r\n                    value={email}\r\n                    onChange={onChange}\r\n                />\r\n                <input\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    required\r\n                    value={password}\r\n                    onChange={onChange}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    placeholder=\"value\"\r\n                    required\r\n                    value={newAccount ? 'Create Account' : 'Log In'}\r\n                />\r\n                {error}\r\n            </form>\r\n            <span onClick={toggleAccount}>\r\n                {newAccount ? 'Sign In' : 'Create Account'}\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthForm\r\n","import {firebaseInstance, authService} from 'fbase'\r\nimport AuthForm from 'components/AuthForm.js'\r\n\r\nconst Auth = () => {\r\n    const onSocialClick = async e => {\r\n        const {\r\n            target: {name},\r\n        } = e\r\n        let provider\r\n\r\n        //팝업창 닫을 시 에러발생\r\n        //https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth\r\n        //참고하여 해결\r\n        if (name === 'google') {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider()\r\n        } else if (name === 'github') {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider()\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider).then(\r\n            function (result) {},\r\n            function (error) {},\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AuthForm />\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">\r\n                    Continue with Google\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\">\r\n                    Continue with Github\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","import {dbService, storageService} from 'fbase'\r\nimport {useState} from 'react'\r\n\r\nconst Tweet = ({tweetObj, isOwner}) => {\r\n    const [tempTweet, setTempTweet] = useState(tweetObj.text)\r\n    const [editFlag, setEditFlag] = useState(false)\r\n\r\n    const onDeleteClick = async () => {\r\n        const flag = window.confirm('삭제하시겠습니까?')\r\n        if (flag) {\r\n            await dbService.doc(`tweet/${tweetObj.id}`).delete()\r\n            if (tweetObj.attachmentUrl !== '') {\r\n                await storageService\r\n                    .refFromURL(`${tweetObj.attachmentUrl}`)\r\n                    .delete()\r\n            }\r\n        }\r\n    }\r\n\r\n    const onEditClick = () => {\r\n        setEditFlag(true)\r\n        setTempTweet(tweetObj.text)\r\n    }\r\n\r\n    const onCancelClick = () => {\r\n        setEditFlag(false)\r\n        setTempTweet('')\r\n    }\r\n\r\n    /*  error Code\r\n     *   onclick event function의 첫 인자로 무조건 event객체가 들어오는게 기본동작\r\n     *   그래서 이렇게 하면 이벤트객체의 id를 가져오는데 undefined가 뜬다.\r\n     *   실수 하지말자!\r\n     */\r\n    // const onOKClick = async (tweetObj) => {\r\n    //     const flag = window.confirm('수정하시겠습니까?');\r\n    //     if(flag) {\r\n    //         await dbService.doc(`tweet/${tweetObj.id}`).update({text: tempTweet});\r\n    //         setEditFlag(false);\r\n    //     }\r\n    // }\r\n\r\n    const onOKClick = async () => {\r\n        const flag = window.confirm('수정하시겠습니까?')\r\n        if (flag) {\r\n            await dbService\r\n                .doc(`tweet/${tweetObj.id}`)\r\n                .update({text: tempTweet})\r\n            setEditFlag(false)\r\n        }\r\n    }\r\n    const onChange = event => {\r\n        // const value = event.target.value;\r\n        const {\r\n            target: {value},\r\n        } = event\r\n        setTempTweet(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editFlag ? (\r\n                <>\r\n                    <input type=\"text\" value={tempTweet} onChange={onChange} />\r\n                    <button onClick={onCancelClick}>Cancel</button>\r\n                    <button onClick={onOKClick}>OK</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{tweetObj.text}</h4>\r\n                    {tweetObj.attachmentUrl && (\r\n                        <img\r\n                            src={tweetObj.attachmentUrl}\r\n                            width=\"50px\"\r\n                            height=\"50px\"\r\n                        />\r\n                    )}\r\n                    {isOwner && (\r\n                        <>\r\n                            <button onClick={onDeleteClick}>\r\n                                Delete Tweet\r\n                            </button>\r\n                            <button onClick={onEditClick}>Edit Tweet</button>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tweet\r\n","import {v4 as uuidv4} from 'uuid'\r\nimport {storageService} from 'fbase'\r\nimport {useState} from 'react'\r\nimport {dbService} from 'fbase'\r\n\r\nconst TweetFactory = ({userObj}) => {\r\n    const [tweet, setTweet] = useState('')\r\n    const [attachment, setAttachment] = useState('')\r\n\r\n    const onClearAttachment = () => setAttachment('')\r\n\r\n    const onChange = event => {\r\n        event.preventDefault()\r\n        const {\r\n            target: {value},\r\n        } = event\r\n        setTweet(value)\r\n    }\r\n\r\n    const onFileChange = event => {\r\n        const {\r\n            target: {files},\r\n        } = event\r\n        const file = files[0]\r\n\r\n        const reader = new FileReader()\r\n        reader.onloadend = finishedEvent => {\r\n            const {\r\n                currentTarget: {result},\r\n            } = finishedEvent\r\n            setAttachment(result)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const onSubmit = async event => {\r\n        event.preventDefault()\r\n        /* await dbService.collection('tweet').add({\r\n            text: tweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n        })\r\n        setTweet('') */\r\n        let attachmentUrl = ''\r\n        if (attachment !== '') {\r\n            const attachmentRef = storageService\r\n                .ref()\r\n                .child(`${userObj.uid}/${uuidv4()}`)\r\n            const response = await attachmentRef.putString(\r\n                attachment,\r\n                'data_url',\r\n            )\r\n            attachmentUrl = await response.ref.getDownloadURL()\r\n        }\r\n        await dbService.collection('tweet').add({\r\n            text: tweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl,\r\n        })\r\n        setTweet('')\r\n        setAttachment('')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input\r\n                value={tweet}\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                maxLength={120}\r\n            />\r\n            <input\r\n                type=\"file\"\r\n                accept=\".jpg, .jpeg, .png\"\r\n                onChange={onFileChange}\r\n            />\r\n            <input type=\"submit\" value=\"Tweet\" />\r\n            {attachment && (\r\n                <div>\r\n                    <img src={attachment} width=\"50px\" height=\"50px\" />\r\n                    <button onClick={onClearAttachment}>Clear</button>\r\n                </div>\r\n            )}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TweetFactory\r\n","import {dbService} from 'fbase'\r\nimport {useEffect, useState} from 'react'\r\nimport Tweet from 'components/Tweet'\r\nimport TweetFactory from 'components/TweetFactory'\r\n\r\nconst Home = ({userObj}) => {\r\n    const [tweets, setTweets] = useState([])\r\n\r\n    // const getTweets = async () => {\r\n    //     const dbTweets = await dbService.collection(\"tweet\").get();\r\n    //     dbTweets.forEach(doc => {\r\n    //         const tweetObject = { ...doc.data(), id: doc.id };\r\n    //         //여기서  prev란? setState 에서 제공하는 이전 객체값.\r\n    //         setTweets( prev =>  [ tweetObject, ...prev ])\r\n    //     })\r\n    // }\r\n\r\n    useEffect(() => {\r\n        dbService.collection('tweet').onSnapshot(snapshot => {\r\n            const newArray = snapshot.docs.map(document => ({\r\n                id: document.id,\r\n                ...document.data(),\r\n            }))\r\n            setTweets(newArray)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <TweetFactory userObj={userObj} />\r\n            <div>\r\n                {tweets.map(tweet => (\r\n                    <Tweet\r\n                        key={tweet.id}\r\n                        tweetObj={tweet}\r\n                        isOwner={tweet.creatorId === userObj.uid}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import {Link} from 'react-router-dom'\r\n\r\nconst Navigation = ({userObj}) => {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n","import {authService, dbService} from 'fbase'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport {useEffect, useState} from 'react'\r\nimport Tweet from 'components/Tweet'\r\n\r\n/* \r\n// v5\r\nconst history = useHistory();\r\n\r\nhistory.push('/home');\r\nhistory.replace('/home');\r\n\r\n// v6\r\nconst navigate = useNavigate();\r\n\r\nnavigate('/home');\r\nnavigate('/home', {replace: true});\r\n*/\r\n\r\nconst Profile = ({userObj, refreshUser}) => {\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const onLogOutClick = async () => {\r\n        await authService.signOut()\r\n        refreshUser()\r\n        navigate('/')\r\n    }\r\n\r\n    const onChange = event => {\r\n        const {\r\n            target: {value},\r\n        } = event\r\n        setNewDisplayName(value)\r\n    }\r\n\r\n    const onSubmit = async event => {\r\n        event.preventDefault()\r\n        if (userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({displayName: newDisplayName})\r\n            refreshUser()\r\n        }\r\n    }\r\n    // const [tweets, setTweets] = useState([])\r\n\r\n    // useEffect(() => {\r\n    //     getMyTweets()\r\n    // }, [])\r\n\r\n    // const getMyTweets = async () => {\r\n    //     const tweets = await dbService\r\n    //         .collection('tweet')\r\n    //         .where('creatorId', '==', userObj.uid)\r\n    //         .orderBy('createdAt', 'asc')\r\n\r\n    //     tweets.onSnapshot(snapshot => {\r\n    //         const newArray = snapshot.docs.map(document => ({\r\n    //             id: document.id,\r\n    //             ...document.data(),\r\n    //         }))\r\n    //         setTweets(newArray)\r\n    //     })\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={onChange}\r\n                    placeholder=\"Display name\"\r\n                    value={newDisplayName}\r\n                />\r\n                <input type=\"submit\" value=\"Update Profile\" />\r\n            </form>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n            {/* <div>\r\n                {tweets.map(tweet => (\r\n                    <Tweet\r\n                        key={tweet.id}\r\n                        tweetObj={tweet}\r\n                        isOwner={tweet.creatorId === userObj.uid}\r\n                    />\r\n                ))}\r\n            </div> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import {HashRouter as Router, Route, Routes, Navigate} from 'react-router-dom'\r\nimport Auth from 'pages/Auth'\r\nimport Home from 'pages/Home'\r\nimport Navigation from './Navigation'\r\nimport Profile from 'pages/Profile'\r\n\r\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj} />}\r\n            <Routes>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Route\r\n                            exact\r\n                            path=\"/\"\r\n                            element={<Home userObj={userObj} />}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path=\"/profile\"\r\n                            element={\r\n                                <Profile\r\n                                    refreshUser={refreshUser}\r\n                                    userObj={userObj}\r\n                                />\r\n                            }\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <Route exact path=\"/\" element={<Auth />} />\r\n                )}\r\n                <Route path=\"*\" element={<Navigate to=\"/\" />} />\r\n            </Routes>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","// import logo from './logo.svg';\n// import './App.css';\nimport {useEffect, useState} from 'react'\nimport AppRouter from 'components/Router'\nimport {authService} from 'fbase'\n\nfunction App() {\n    const [init, setInit] = useState(false)\n    const [userObj, setUserObj] = useState(null)\n\n    const setUser = user => {\n        setUserObj(\n            user && {\n                uid: user.uid,\n                displayName: user.displayName,\n                updateProfile: args => user.updateProfile(args),\n            },\n        )\n    }\n    //https://ko.reactjs.org/docs/hooks-effect.html\n    //두번째 인자로 배열을 넘겨서, 배열안의 변수가 변하지 않는다면 effect를 막는식으로\n    //렌더링 될떄마다 effect가 발동되는것을 막을 수 있다.\n    //빈배열을 넘긴다면, effect가 일어나지 않음을 의미\n    useEffect(() => {\n        authService.onAuthStateChanged(user => {\n            if (user) {\n                setUser(user)\n            } else {\n                setUser(null)\n            }\n            setInit(true)\n        })\n    }, [])\n\n    const refreshUser = () => {\n        // setUserObj(authService.currentUser)\n        const user = authService.currentUser\n        setUser(user)\n    }\n\n    return (\n        <>\n            {init ? (\n                <AppRouter\n                    isLoggedIn={Boolean(userObj)}\n                    userObj={userObj}\n                    refreshUser={refreshUser}\n                />\n            ) : (\n                'initializing...'\n            )}\n        </>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from 'components/App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}